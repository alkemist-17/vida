
//
// Script: fun
// Provides some high order functions for arrays.
// Version 1.2.0
//



// Library object
var lib = {}



// Map 
lib.map = fun A, f {
    var R = array(len(A))
    for i, v in A {
        R[i] = f(v)
    }
    ret R
}



// Filter
lib.filter = fun A, pred {
    var R = []
    for _, v in A {
        if pred(v) {
            append(R, v)
        }
    }
    ret R
}


// Exclude
lib.exclude = fun A, pred {
    var R = []
    for _, v in A {
        if not pred(v) {
            append(R, v)
        }
    }
    ret R
}



// All
lib.all = fun A, pred {
    for _, v in A {
        if not pred(v) {
            ret false
        }
    }
    ret true
}



// Any
lib.any = fun A, pred {
    for _, v in A {
        if pred(v) {
            ret true
        }
    }
    ret false
}



// Reduce
lib.reduce = fun A, f, init {
    for _, v in A {
        init = f(init, v)
    }
    ret init
}



// TakeWhile
lib.takeWhile = fun A, pred {
    var R = []
    for _, v in A {
        if not pred(v) {
            ret R
        }
        append(R, v)
    }
    ret R
}



// Zip
lib.zip = fun l, r {
    var length = nil
    var ll = len(l)
    var lr = len(r)
    if ll < lr {
        length = ll
    } else {
        length = lr
    }
    var R = array(length)
    for i in length {
        R[i] = [l[i], r[i]]
    }
    ret R
}



// UnZip
lib.unzip = fun zipped {
    var l = len(zipped)
    var A = array(l)
    var B = array(l)
    for i, v in zipped {
        A[i] = v[0]
        B[i] = v[1]
    }
    ret [A, B]
}



// Drop
lib.drop = fun A, n {
    if n < 0 {
        ret []
    }
    ret A[n..]
}



export lib
