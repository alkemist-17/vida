
//
// Module functional
// This module provides some high order functions for working with lists.
// Version 1.0.0
//



// Object to export
var functional = {}



// Map 
functional.map = fun l f {
    var xs = list(len(l))
    for i, v in l {
        xs[i] = f(v)
    }
    ret xs
}



// Filter
functional.filter = fun l pred {
    var xs = []
    for _, v in l {
        if pred(v) {
            append(xs, v)
        }
    }
    ret xs
}



// All
functional.all = fun l pred {
    for _, v in l {
        if not pred(v) {
            ret false
        }
    }
    ret true
}



// Any
functional.any = fun l pred {
    for _, v in l {
        if pred(v) {
            ret true
        }
    }
    ret false
}



// Reduce
functional.reduce = fun l f init {
    for _, v in l {
        init = f(init v)
    }
    ret init
}



// TakeWhile
functional.takeWhile = fun l pred {
    var xs = []
    for _, v in l {
        if not pred(v) {
            ret xs
        }
        append(xs v)
    }
    ret xs
}



// Zip
functional.zip = fun l r {
    var length = nil
    var ll = len(l)
    var lr = len(r)
    if ll < lr {
        length = ll
    } else {
        length = lr
    }
    var xs = list(length)
    for i = 0, length {
        xs[i] = [l[i] r[i]]
    }
    ret xs
}



// UnZip
functional.unzip = fun l {
    var ll = len(l)
    var a = list(ll)
    var b = list(ll)
    for i, v in l {
        a[i] = v[0]
        b[i] = v[1]
    }
    ret [a b]
}

export(functional)
