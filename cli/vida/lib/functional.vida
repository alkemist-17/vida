
//
// Module functional list
// This module provides high order functions for lists.
// Version 1.0.0
//

loc functional = {}

functional.map = fun l, f {
    loc xs = list(len(l))
    for i, v in l {
        xs[i] = f(v)
    }
    ret xs
}

functional.filter = fun l, pred {
    loc xs = []
    for _, v in l {
        if pred(v) {
            append(xs, v)
        }
    }
    ret xs
}

functional.all = fun l, pred {
    for _, v in l {
        if not pred(v) {
            ret false
        }
    }
    ret true
}

functional.any = fun l, pred {
    for _, v in l {
        if pred(v) {
            ret true
        }
    }
    ret false
}

functional.reduce = fun l, f, init {
    for _, v in l {
        init = f(init, v)
    }
    ret init
}

functional.takeWhile = fun l, pred {
    loc xs = list()
    for _, v in l {
        if not pred(v) {
            ret xs
        }
        append(xs, v)
    }
    ret xs
}

functional.zip = fun l, r {
    loc length = nil
    loc ll = len(l)
    loc lr = len(r)
    if ll < lr {
        length = ll
    } else {
        length = lr
    }
    loc xs = list(length)
    for i = 0, length {
        xs[i] = [l[i], r[i]]
    }
    ret xs
}

functional.unzip = fun l {
    loc ll = len(l)
    loc a = list(ll)
    loc b = list(ll)
    for i, v in l {
        a[i] = v[0]
        b[i] = v[1]
    }
    ret [a, b]
}

export(functional)
