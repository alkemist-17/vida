
//
// Script: functools
// Provides some high order functions for arrays.
// Version 1.0.0
//



// Library object
var lib = {}



// Map 
lib.map = fun l, f {
    var xs = array(len(l))
    for i, v in l {
        xs[i] = f(v)
    }
    ret xs
}



// Filter
lib.filter = fun l, pred {
    var xs = []
    for _, v in l {
        if pred(v) {
            append(xs, v)
        }
    }
    ret xs
}



// All
lib.all = fun l, pred {
    for _, v in l {
        if not pred(v) {
            ret false
        }
    }
    ret true
}



// Any
lib.any = fun l, pred {
    for _, v in l {
        if pred(v) {
            ret true
        }
    }
    ret false
}



// Reduce
lib.reduce = fun l, f, init {
    for _, v in l {
        init = f(init, v)
    }
    ret init
}



// TakeWhile
lib.takeWhile = fun l, pred {
    var xs = []
    for _, v in l {
        if not pred(v) {
            ret xs
        }
        append(xs, v)
    }
    ret xs
}



// Zip
lib.zip = fun l, r {
    var length = nil
    var ll = len(l)
    var lr = len(r)
    if ll < lr {
        length = ll
    } else {
        length = lr
    }
    var xs = array(length)
    for i in 0, length {
        xs[i] = [l[i], r[i]]
    }
    ret xs
}



// UnZip
lib.unzip = fun l {
    var ll = len(l)
    var a = array(ll)
    var b = array(ll)
    for i, v in l {
        a[i] = v[0]
        b[i] = v[1]
    }
    ret [a, b]
}



export lib
