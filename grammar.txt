module		:=	statement*
statement	:= 	global
			| 	local
			|	set
			|	datamut
			|	call
			|	block
			|	for
			|	ifor
			|	if
			|	while
global		:=	'let' ident '=' expr
local		:=	'loc' ident '=' expr
set			:=	iden '=' expr
datamut		:=	ident select select* '=' expr
call		:=	iden select* '(' (expr (',' expr)*)? ')'
block		:=	'{' statement* '}'
loopBlock	:=	'{' statement* break* continue* '}'
for			:=	'for' ident '=' expr ',' expr (',' expr)? loopBlock
ifor		:=	'for' ident ',' ident 'in' expr loopBlock
if			:=	'if' expr block | loopBlock elif* else?
elif		:=	'else' 'if' expr block | loopBlock
else		:=	'else' block | loopBlock
while		:=	'while' expr loopBlock
ident		:=	['_' | letter]+ ['_' | letter | number]*
expr		:=	prefix
			|	binary
prefix		:=	'not' | '+' | '-' prefix
			|	primary select*
binary		:=	expr binop expr
primary		:=	'true'
			|	'false'
			|	'nil'
			|	ident
			|	'(' expr ')'
			|	Integer
			|	Float
			|	String
			|	List
			|	Object
			|	Function
			|	callExpr
binop		:=	'and'
			|	'or'
			|	'+'
			|	'-'
			|	'*'
			|	'/'
			|	'%'
			|	'<'
			|	'<='
			|	'>'
			|	'>='
			|	'=='
			|	'!='
List		:=	'[' (expr (',' expr)*)? ']'
Object		:=	'{' (pair (',' pair))* '}'
pair		:=	ident ':' expr
Function	:=	'fn' (iden (',' iden)*)? fBody | '=>' expr
callExpr	:=	expr '(' (expr (',' expr)*)? ')'
fBody		:=	'{' statement* ret?* '}'
select		:=	'[' expr | ':' | ':' expr | expr ':' | expr ':' expr ']' select*
			|	'.' ident select*
			|	'(' (expr (',' expr)*)? ')' select*
			|	':' ident '(' (expr (',' expr)*)? ')' select*
break		:=	'break'
continue	:=	'continue'
ret			:=	'ret' expr
