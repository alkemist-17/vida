module		:=	statement*
statement	:= 	global
			| 	local
			|	mut
			|	data
			|	call
			|	block
			|	for
			|	ifor
			|	if
			|	while
			|	export
global		:=	'let' ident '=' expr
local		:=	'loc' ident '=' expr
mut			:=	iden '=' expr
data		:=	ident select select* '=' expr
call		:=	iden select* '(' ...expr | (expr (',' expr)* (',' ...expr)?)? ')'
block		:=	'{' statement* '}'
loopBlock	:=	'{' statement* break* continue* '}'
for			:=	'for' ident '=' expr (',' expr (',' expr)?)? loopBlock
ifor		:=	'for' ident ',' ident 'in' expr loopBlock
			|	'for' 'in' expr loopBlock
if			:=	'if' expr block | loopBlock elif* else?
elif		:=	'else' 'if' expr block | loopBlock
else		:=	'else' block | loopBlock
while		:=	'while' expr loopBlock
export		:=	'export' expr
ident		:=	['_' | letter]+ ['_' | letter | number]*
expr		:=	prefix
			|	binary
prefix		:=	'not' | '+' | '-' | '~' prefix
			|	primary select*
binary		:=	expr binop expr
primary		:=	'true'
			|	'false'
			|	'nil'
			|	ident
			|	'(' expr ')'
			|	Integer
			|	Float
			|	String
			|	List
			|	Object
			|	Function
			|	Error
			|	Import
			|	Enumeration
binop		:=	'and'
			|	'or'
			|	'+'
			|	'-'
			|	'*'
			|	'/'
			|	'%'
			|	'<'
			|	'<='
			|	'>'
			|	'>='
			|	'=='
			|	'!='
			|	'&'
			|	'|'
			|	'^'
			|	'>>'
			|	'<<'
String		:=	'"' Any valid utf-8 encoded byte '"'
			|	'`' Any valid utf-8 encoded byte '`'
List		:=	'[' (expr (',' expr)*)? (',')? ']'
			|	'[' ']'
Object		:=	'{' (pair ((',')? pair))* (',')? '}'
			|	'{' ident ((',')? ident)* (',')? '}'
			|	'{' '}'
pair		:=	ident '=' expr
Error		:=	'error' '(' expr? ')'
Import		:=	'import' '(' String ')'
Function	:=	'fn' (iden... | iden (',' iden)* (',' iden...)? )? fBody | '=>' expr
fBody		:=	'{' statement* ret?* '}'
Enumeration :=	'enum' '{' ident+ '}'
			|	'enum' '{' ident '=' '-'|'+'|'~'? Integer iden* '}'
select		:=	'[' expr | '..' | '..' expr | expr '..' | expr '..' expr ']' select*
			|	'.' ident select*
			|	'(' ...expr | (expr (',' expr)*)?  (',' ...expr)? ')' select*
			|	'--' ident '(' ...expr | (expr (',' expr)*)? (',' ...expr)? ')' select*
break		:=	'break'
continue	:=	'continue'
ret			:=	'ret' expr