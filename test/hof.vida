

let map = fun xs, f {
    var newXS = list(len(xs))
    for i, v in xs {
        newXS[i] = f(v)
    }
    ret newXS
}

let filter = fun xs, pred {
    var newXS = []
    for i, v in xs {
        if pred(v) {
            append(newXS, v)
        }
    }
    ret newXS
}

let reduce = fun xs, acc, f {
    for i, v in xs {
        acc = f(acc, v)
    }
    ret acc
}

let one = 1
let threshold = 100
let N = 10_000_000
let xs = list(N, one)

let r = reduce(
        filter(
        map(
            xs,
            fun x => x * x * x),
            fun x => x < threshold),
            1,
            fun x, y => x * y)

print(r)
assert(r == one)

var K = fun x => fun y => x
var I = fun x => x
var CONS = fun x => fun y => fun f => f(x)(y)
var HEAD = fun xs => xs(K)
var TAIL = fun xs => xs(K(I))
let FOREACH = fun f => fun xs {
    if xs {
        f(HEAD(xs))
        FOREACH(f)(TAIL(xs))
    }
}

xs = CONS(1)(CONS(2)(CONS(3)(nil)))
FOREACH(print)(xs)
