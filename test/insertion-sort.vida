/*
* Insertion Sort
*/

let rand = load("rand")

let iComparable = {
    comparedTo= fun self, r {
        if self.val < r.val {
            ret -1
        }
        if self.val > r.val {
            ret 1
        }
        ret 0
    }
}

let less = fun v, w {
    if v--comparedTo(w) < 0 {
        ret true
    }
    ret false
}

let swap = fun comparables, i, j {
    var temp = comparables[i]
    comparables[i] = comparables[j]
    comparables[j] = temp
}

let isSorted = fun comparables {
    for i = 1, len(comparables) {
        if less(comparables[i], comparables[i-1]) {
            ret false
        }
    }
    ret true
}

let insertionSort = fun comparables {
    var N = len(comparables)
    for i = 0, N {
        for j = i, 0, -1 {
            if less(comparables[j], comparables[j-1]) {
                swap(comparables, j, j-1)
            } else {
                break
            }
        }
    }
    ret comparables
}

let number = {
    val= 0,
    comparedTo= iComparable.comparedTo
}

let newNumber = fun x {
    var n = clone(number)
    n.val = x
    ret n
}

let N = 1_000
let upperLimit = N
let numbers = list(N)

for i, _ in numbers {
    numbers[i] = newNumber(rand.nextI(N))
}

let r = insertionSort(numbers)

assert(isSorted(r))

for i, _ in numbers {
    numbers[i] = newNumber(rand.nextF()*N)
}

r = insertionSort(numbers)

assert(isSorted(r))
