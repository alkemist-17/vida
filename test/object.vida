assert(object)

loc void = {}

loc empty = void

assert(object.inject(void, void, void) == void and object.inject(void, void, void) == empty)

loc gen = { calipso casipea ursaMaiorem }

assert(object.inject(void, void, gen))
assert(object.check(void, gen))

void = {}

loc alp = { hello = 42, world = 43 }
loc his = { hello = true, world = false }

assert(object.override(void, alp, his).hello == his.hello)
assert(object.override(void, alp, his).world == his.world)

void = {}

assert(object.inject(void, alp, his).hello == alp.hello)
assert(object.inject(void, alp, his).world == alp.world)

void = { hello world }
alp = { this is the end }
his = { tomorrow never die }

assert(len(void) == 2)

loc oldVoidLength = len(void)

object.inject(void, alp, his)

assert(len(void) == oldVoidLength + len(alp) + len(his))

loc checkProps = fun void {
    for in 1000 {
        loc v = clone(void)
        assert(v.hello == void.hello and v.world == void.world and v.alpha == void.alpha)
    }
}


void = {
    hello
    world
    alpha = 42
}

checkProps(void)

void = {
    hello = 90
    world = 120
    alpha = "alpha"
}

checkProps(void)

void = {
    hello = "hello"
    world,
    alpha
}

checkProps(void)

void = {
    hello,
    world,
    alpha,
}

checkProps(void)

void = {
    hello = 90,
    world = 120,
    alpha = "alpha",
}

checkProps(void)

void = { hello world alpha }

checkProps(void)


void = {
    hello = "hello"
    world,
    alpha,
}

checkProps(void)



void = {
    hello,
    world = 90,
    alpha,
}

checkProps(void)


void = {
    hello = "hello"
    world,
    alpha = 123123
}

checkProps(void)


void = {
    hello = "hello"
    world
    alpha = 123123,
}

checkProps(void)


void = {
    hello,
    world,
    alpha = 90,
}

checkProps(void)



void = {
    hello = "hello"
    world = 3213
    alpha
}

checkProps(void)

void = {
    hello = "hello"
    world = 90
    alpha,
}

checkProps(void)

loc Vehicle = {
    engines = 1
    ignition = fun self => print("Vehicle Engine Ignition")
    drive = fun self {
        self--ignition()
        print("Vehicle is moving forward")
    }
}

loc Car = object.extend({
    wheels = 4
    drive = fun self {
        Vehicle.drive(self)
        print("Car is rolling the wheels", self.wheels)
    }
}, Vehicle)

assert(Car.wheels and Car.wheels == 4)
assert(Car.engines and Car.engines == 1)
assert(Car.drive)
assert(Car.ignition)
assert(Car != Vehicle)

