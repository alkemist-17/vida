assert(object)

var void = {}

var empty = void

assert(object.inject(void, void, void) == void and object.inject(void, void, void) == empty)

var gen = { calipso casipea ursaMaiorem }

assert(object.inject(void, void, gen))
assert(object.conforms(void, gen))

void = {}

var alp = { hello = 42, world = 43 }
var his = { hello = true, world = false }

assert(object.override(void, alp, his).hello == his.hello)
assert(object.override(void, alp, his).world == his.world)

void = {}

assert(object.inject(void, alp, his).hello == alp.hello)
assert(object.inject(void, alp, his).world == alp.world)

void = { hello world }
alp = { this is the end }
his = { tomorrow never die }

assert(len(void) == 2)

var oldVoidLength = len(void)

object.inject(void, alp, his)

assert(len(void) == oldVoidLength + len(alp) + len(his))

var checkProps = fun void {
    for in 1000 {
        var v = clone(void)
        assert(v.hello == void.hello and v.world == void.world and v.alpha == void.alpha)
    }
}


void = {
    hello
    world
    alpha = 42
}

checkProps(void)

void = {
    hello = 90
    world = 120
    alpha = "alpha"
}

checkProps(void)

void = {
    hello = "hello"
    world,
    alpha
}

checkProps(void)

void = {
    hello,
    world,
    alpha,
}

checkProps(void)

void = {
    hello = 90,
    world = 120,
    alpha = "alpha",
}

checkProps(void)

void = { hello world alpha }

checkProps(void)


void = {
    hello = "hello"
    world,
    alpha,
}

checkProps(void)


void = {
    hello,
    world = 90,
    alpha,
}

checkProps(void)


void = {
    hello = "hello"
    world,
    alpha = 123123
}

checkProps(void)


void = {
    hello = "hello"
    world
    alpha = 123123,
}

checkProps(void)


void = {
    hello,
    world,
    alpha = 90,
}

checkProps(void)

void = {
    hello = "hello"
    world = 3213
    alpha
}

checkProps(void)

void = {
    hello = "hello"
    world = 90
    alpha,
}

checkProps(void)

void = {
    hello
    world
}

empty = {
    alpha
    gamma
    theta
}


assert(object.inject(void, empty).alpha == nil)
assert(object.inject(void, empty).gamma == nil)
assert(object.inject(void, empty).theta == nil)


assert(not object.extract(void, empty).alpha)
assert(not object.extract(void, empty).gamma)
assert(not object.extract(void, empty).theta)

