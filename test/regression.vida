
var a = "hello"
var b = nil
var f = fun => a + format("%v", b)
var result = f()
assert(result == "hellonil")

var data = {
    id = 42
    name = "data"
    email = "data@data.data"
    getId = fun self => self.id
    getName = fun self => self.name
    getEmail = fun self => self.email
}

for in 1000 {
    var data = clone(data)
    assert(data:getId() == data.id)
    assert(data:getName() == data.name)
    assert(data:getEmail() == data.email)
    data:getId()
    data:getName()
    data:getEmail()
}

var src = [1, 2, 3, 4, 5] // This values should be all different

data = [
    [
        [
            [
                [
                    src[0],
                    src[1],
                    src[2],
                    src[3],
                    src[4],
                ]
            ]
        ]
    ]
]

var i = 0
let j = [0, 1, 2, 3, 4, ]

assert(data[i][i][i][i][j[0]] == src[0])
assert(data[i][i][i][i][j[1]] == src[1])
assert(data[i][i][i][i][j[2]] == src[2])
assert(data[i][i][i][i][j[3]] == src[3])
assert(data[i][i][i][i][j[4]] == src[4])

assert(data[i][i][i][i][j[0]] != src[4])
assert(data[i][i][i][i][j[1]] != src[3])
assert(data[i][i][i][i][j[2]] != src[0])
assert(data[i][i][i][i][j[3]] != src[1])
assert(data[i][i][i][i][j[4]] != src[0])


data = [
    1, 1, 1,
    0, 0, 0,
    2, 2, 2,
]

assert(
    data[0] == 1 and data[1] == 1 and data[2] == 1 or
    data[3] == 1 and data[4] == 1 and data[5] == 1 or
    data[6] == 1 and data[7] == 1 and data[8] == 1 or
    data[0] == 1 and data[4] == 1 and data[8] == 1 or
    data[2] == 1 and data[4] == 1 and data[6] == 1 or
    data[0] == 1 and data[3] == 1 and data[6] == 1 or
    data[1] == 1 and data[4] == 1 and data[7] == 1 or
    data[2] == 1 and data[5] == 1 and data[8] == 1
)

assert(
    data[0] == 1 and data[1] == 1 and data[2] == 0 or
    data[3] == 0 and data[4] == 0 and data[5] == 0 or
    data[6] == 1 and data[7] == 1 and data[8] == 0 or
    data[0] == 1 and data[4] == 1 and data[8] == 0 or
    data[2] == 1 and data[4] == 1 and data[6] == 0 or
    data[0] == 1 and data[3] == 1 and data[6] == 0 or
    data[1] == 1 and data[4] == 1 and data[7] == 0 or
    data[2] == 1 and data[5] == 1 and data[8] == 0
)

assert(
    data[0] == 1 and data[1] == 1 and data[2] == 2 or
    data[3] == 1 and data[4] == 1 and data[5] == 2 or
    data[6] == 2 and data[7] == 2 and data[8] == 2 or
    data[0] == 1 and data[4] == 1 and data[8] == 2 or
    data[2] == 1 and data[4] == 1 and data[6] == 2 or
    data[0] == 1 and data[3] == 1 and data[6] == 2 or
    data[1] == 1 and data[4] == 1 and data[7] == 2 or
    data[2] == 1 and data[5] == 1 and data[8] == 2
)

var cmp = {
    hello = 0
    world = 1
    gamma = 2
}

assert(
    data[0] == cmp.hello and data[1] == cmp.hello and data[2] == cmp.hello or
    data[3] == cmp.hello and data[4] == cmp.hello and data[5] == cmp.hello or
    data[6] == cmp.hello and data[7] == cmp.hello and data[8] == cmp.hello
)

assert(
    data[0] == cmp.world and data[1] == cmp.world and data[2] == cmp.world or
    data[3] == cmp.world and data[4] == cmp.world and data[5] == cmp.world or
    data[6] == cmp.world and data[7] == cmp.world and data[8] == cmp.world
)

assert(
    data[0] == cmp.gamma and data[1] == cmp.gamma and data[2] == cmp.gamma or
    data[3] == cmp.gamma and data[4] == cmp.gamma and data[5] == cmp.gamma or
    data[6] == cmp.gamma and data[7] == cmp.gamma and data[8] == cmp.gamma
)


var ___a = [1, 2, 3, 4, 5]
var ___ref = ___a
let ___i = 0
___a[___i] = ___i
var ___b = 90
var ___c = ___b + ___b

assert(___b == 90)
assert(___c == ___b + ___b)
assert(___a == ___ref)


data = [1,]
assert(len(data) == 1 and data[0] == 1)

data = [1, 2,]
assert(len(data) == 2 and data[0] == 1 and data[1] == 2)

data = [1, 2, ]
assert(len(data) == 2 and data[0] == 1 and data[1] == 2)

data = [1, 2, 3,]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3,]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3,]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3,]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3,]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = [1, 2, 3]
assert(len(data) == 3 and data[0] == 1 and data[1] == 2 and data[2] == 3)

data = {}
assert(len(data) == 0 and data.hello == nil)

data = { hello beautiful world }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello, beautiful, world, }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello, beautiful world }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello beautiful, world }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello beautiful world, }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello, beautiful, world }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello beautiful, world, }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello, beautiful world, }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

data = { hello, beautiful, world }
assert(len(data) == 3 and not data.hello and not data.beautiful and not data.world)

var i = 90

data = {
    hello = i
    beautiful = i
    world = i
}
assert(len(data) == 3 and data.hello == i and data.beautiful == i and data.world == i)
assert(len(data) == 3 and -data.hello == -i and -data.beautiful == -i and -data.world == -i)

data = {
    hello = i
    beautiful
    world
}
assert(len(data) == 3 and data.hello == i and data.beautiful == nil and data.world == nil)
assert(len(data) == 3 and -data.hello == -i and not data.beautiful and not data.world)

data = {
    hello
    beautiful = i
    world
}
assert(len(data) == 3 and data.hello == nil and data.beautiful == i and data.world == nil)
assert(len(data) == 3 and not data.hello and -data.beautiful == -i and not data.world)

data = {
    hello
    beautiful
    world = i
}
assert(len(data) == 3 and data.hello == nil and data.beautiful == nil and data.world == i)
assert(len(data) == 3 and not data.hello and not data.beautiful and -data.world == -i)


data = {
    hello
    beautiful = i
    world = i
}
assert(len(data) == 3 and data.hello == nil and data.beautiful == i and data.world == i)
assert(len(data) == 3 and not data.hello and -data.beautiful == -i and -data.world == -i)


data = {
    hello = i
    beautiful = i
    world
}
assert(len(data) == 3 and data.hello == i and data.beautiful == i and data.world == nil)
assert(len(data) == 3 and -data.hello == -i and -data.beautiful == -i and not data.world)

data = {
    hello = i
    beautiful
    world = i
}
assert(len(data) == 3 and data.hello == i and data.beautiful == nil and data.world == i)
assert(len(data) == 3 and -data.hello == -i and not data.beautiful and -data.world == -i)


i = [10, 20, 30]
f = fun x, y, z => [x, y, z]

assert(f(i[0], i[1], i[2])[0] == i[0])
assert(f(i[0], i[1], i[2])[1] == i[1])
assert(f(i[0], i[1], i[2])[2] == i[2])

assert(f(i[0], i[1], i[2])[0] == i[0])
assert(f(i[0], i[1], i[2])[1] == i[1])
assert(f(i[0], i[1], i[2])[2] == i[2])

assert(f(i[0], i[1], i[2])[0] == i[0])
assert(f(i[0], i[1], i[2])[1] == i[1])
assert(f(i[0], i[1], i[2])[2] == i[2])

assert(f(i[0], i[1], i[2])[0] == i[0])
assert(f(i[0], i[1], i[2])[1] == i[1])
assert(f(i[0], i[1], i[2])[2] == i[2])

assert(f(i[0], i[1], i[2])[0] == i[0])
assert(f(i[0], i[1], i[2])[1] == i[1])
assert(f(i[0], i[1], i[2])[2] == i[2])

assert(f(i[0], i[1], i[2])[0] == i[0])
assert(f(i[0], i[1], i[2])[1] == i[1])
assert(f(i[0], i[1], i[2])[2] == i[2])

