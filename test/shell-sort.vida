/*
* Shell Sort
* With h(x)=3x+1
*/


let iComparable = {
    comparedTo = fun self, r {
        if self.val < r.val {
            ret -1
        }
        if self.val > r.val {
            ret 1
        }
        ret 0
    }
}

let less = fun v, w {
    if v->comparedTo(w) < 0 {
        ret true
    }
    ret false
}

let swap = fun comparables, i, j {
    var temp = comparables[i]
    comparables[i] = comparables[j]
    comparables[j] = temp
}

let isSorted = fun comparables {
    for i in 1, len(comparables) {
        if less(comparables[i], comparables[i-1]) {
            ret false
        }
    }
    ret true
}

let number = {
    val = 0,
    comparedTo = iComparable.comparedTo
}


let shellSort = fun comparables {
    var N = len(comparables)
    var h = 1
    while h < N/3 {
        h = 3*h + 1
    }
    while h >= 1 {
        for i in h, N {
            var j = i
            while j >= h and less(comparables[j], comparables[j-h]) {
                swap(comparables, j, j-h)
                j = j - h
            }
        }
        h = h/3
    }
    ret comparables
}


let N = 13

let fillList = fun xs, N {
    var count = N
    for i in 0, len(xs) {
        xs[i] = count
        count = count + 1
    }
    ret xs
}


let randomInt = fillList(list(N), N)
let data = list(N)

for i, v in randomInt {
    var val = clone(number)
    val.val = v
    data[i] = val
}

shellSort(data)

assert(isSorted(data))
