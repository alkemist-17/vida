loc text = load("text")
assert(text)

loc data = "Hello, World"

assert(text.hasPrefix(data, "Hell"))
assert(not text.hasPrefix(data, "amber"))

assert(text.hasSuffix(data, "ld"))
assert(not text.hasSuffix(data, "groovy"))

assert(type(text.fromCodePoint(9731, 9733, 9842, nil, true, false, 0x2f804)) == "string")

assert(text.trim("¡¡¡Hello, World!!!", "!¡") == data)
assert(text.trim("   Hello, World   ") == data)
assert(text.trim("   Hello, World   ", nil) == data)
assert(text.trim("Hello, World   ") == data)
assert(text.trim("   Hello, World") == data)

assert(text.split("a,b,c", ","))
assert(text.split("a man a plan a canal panama", "a "))
assert(text.split(" xyz ", ""))
assert(text.split("", "Bernardo O'Higgins"))


// Check equality
loc checkListEquality = fun l, r {
    for i = 0, len(l) {
        assert(l[i] == r[i])
    }
}

// words
loc words = [
    "philanthropy",
    "serendipity",
    "nebula",
    "origin",
    "perception",
    "cardinality"
]


// hasPrefix
assert(text.hasPrefix(words[0], "phil"))
assert(text.hasPrefix(words[1], "ser"))
assert(text.hasPrefix(words[2], "nebula"))
assert(text.hasPrefix(words[3], "origin"))
assert(text.hasPrefix(words[4], "percep"))
assert(text.hasPrefix(words[5], "card"))

// hasSuffix
assert(text.hasSuffix(words[0], "py"))
assert(text.hasSuffix(words[1], "pity"))
assert(text.hasSuffix(words[2], "nebula"))
assert(text.hasSuffix(words[3], "origin"))
assert(text.hasSuffix(words[4], "ception"))
assert(text.hasSuffix(words[5], "ality"))

// fields
loc data = text.fields("philanthropy serendipity nebula origin perception cardinality")

checkListEquality(words, data)

// split
data = text.split("philanthropy, serendipity, nebula, origin, perception, cardinality", ", ")

checkListEquality(words, data)

// repeat
loc someText = "Some Serendipity Star"
loc factor = 1024
data = text.repeat(someText, factor)
assert(len(someText) * factor == len(data))
factor = 0
data = text.repeat(someText, factor)
assert(len(data) == 0)

// fromCodePoint
data = text.fromCodePoint(65, 66, 67, 68, 69, 70)
someText = "ABCDEF"
assert(data == someText)

// replace
someText = "With or without you, I cannot live with or without you"
data = text.replace(someText, "I", "you", -1)
assert(data == "With or without you, you cannot live with or without you")

someText = "Peter Piper picked a peck of pickled peppers"
data = text.replace(someText, "p", "v", 2)
assert(data == "Peter Piver vicked a peck of pickled peppers")

data = text.replace(someText, "p", "v", 4)
assert(data == "Peter Piver vicked a veck of vickled peppers")

data = text.replace(someText, "", "P", -1)
assert(data == "PPPePtPePrP PPPiPpPePrP PpPiPcPkPePdP PaP PpPePcPkP PoPfP PpPiPcPkPlPePdP PpPePpPpPePrPsP")

// replaceAll
data = text.replaceAll(someText, "p", "v")
assert(data == "Peter Piver vicked a veck of vickled vevvers")

// center

someText = "hello"
loc sep = "-"

assert(text.center(someText, -10) == someText)
assert(text.center(someText, 0) == someText)
assert(text.center(someText, 1) == someText)
assert(text.center(someText, 2) == someText)
assert(text.center(someText, 3) == someText)
assert(text.center(someText, 5) == someText)

assert(text.center(someText, 6, sep) == "hello-")
assert(text.center(someText, 7, sep) == "-hello-")
assert(text.center(someText, 8, sep) == "-hello--")
assert(text.center(someText, 9, sep) == "--hello--")
assert(text.center(someText, 10, sep) == "--hello---")
assert(text.center(someText, 11, sep) == "---hello---")

assert(text.center(someText, 6) == "hello ")
assert(text.center(someText, 7) == " hello ")
assert(text.center(someText, 8) == " hello  ")
assert(text.center(someText, 9) == "  hello  ")
assert(text.center(someText, 10) == "  hello   ")
assert(text.center(someText, 11) == "   hello   ")

// contains
someText = "For some other reasons we did not know when it was happening ... "
data = "other "

assert(text.contains(someText, data))

data = "hello, world"

assert(not text.contains(someText, data))

// contains any
data = "kp"
assert(text.containsAny(someText, data))

// index
data = "F"
assert(text.index(someText, data) == 0)

data = "Yellow"
assert(text.index(someText, data) == -1)


// join
data = [1,2,3,4,5]
assert(text.join(data, ",") == "1,2,3,4,5")

data = ["hello", "world", "this", "is", "a chocolate"]
assert(text.join(data, "-") == "hello-world-this-is-a chocolate")

// toLower, toUpper
data = "alphabet"
assert(text.toUpper(data) == "ALPHABET")

data = "ALPHABET"
assert(text.toLower(data) == "alphabet")


// isAscii
let _a = "Enter"
let _b = "caf\u00e9"
let _c = "\xe6\x97\xa5" // 日
let _j = "Japan 日本"

let all = fun iterable, pred {
    for k, v in iterable {
        if not pred(v) {
            ret false
        }
    }
    ret true
}

assert(all(_a, text.isAscii))
assert(not all(_b, text.isAscii))
assert(not all(_c, text.isAscii))
assert(not all(_j, text.isAscii))


// IsX functions

someText = "0123456789"
assert(all(someText, text.isDecimal))
assert(all(someText, text.isDigit))

someText = "0123456789ABCDEF"
assert(all(someText, text.isHexDigit))

someText = "sometextwaswrittenhere"
assert(all(someText, text.isLetter))

someText = [" ", "\n", "\t"]
assert(all(someText, text.isSpace))

// codePoint

someText = "A"
assert(text.codePoint(someText) == 65)
assert(text.fromCodePoint(text.codePoint(someText)) == someText)

someText = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
for k, v in someText {
    assert(text.fromCodePoint(text.codePoint(v)) == v)
}

