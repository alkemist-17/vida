

let map = fn xs, f {
    loc newXS = mkls(len(xs))
    for i, v in xs {
        newXS[i] = f(v)
    }
    ret newXS
}

let filter = fn xs, pred {
    loc newXS = []
    for i, v in xs {
        if pred(v) {
            append(newXS, v)
        }
    }
    ret newXS
}

let reduce = fn xs, acc, f {
    for i, v in xs {
        acc = f(acc, v)
    }
    ret acc
}

let one = 1
let threshold = 100
let N = 10_000_000
let xs = mkls(N, one)

let r = reduce(
        filter(
        map(
            xs,
            fn x => x * x * x),
            fn x => x < threshold),
            1,
            fn x, y => x * y)

print(r)
assert(r == one)

loc K = fn x => fn y => x
loc I = fn x => x
loc CONS = fn x => fn y => fn f => f(x)(y)
loc HEAD = fn xs => xs(K)
loc TAIL = fn xs => xs(K(I))
let FOREACH = fn f => fn xs {
    if xs {
        f(HEAD(xs))
        FOREACH(f)(TAIL(xs))
    }
}

xs = CONS(1)(CONS(2)(CONS(3)(nil)))
FOREACH(print)(xs)
